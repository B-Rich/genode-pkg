

Manually maintained recipes
===========================

! ./recipes/ld/api/content.mk
!                  symbols
!                  hash
! ./recipes/ld/src/content.mk
!                  hash



API packages
============

Generated by tool/api/create from recipes/freetype/api and GENODE_DIR

* Example:

  ! ./tool/api/create freetype

* Execute api/content.mk
  ! -> ./export/api/freetype.api-HASH/symbols
  !                                   include/
  !                                   lib/import

* Compute API hash by hashing the api directory content
  -> compare against the hash in recipes/freetype/api/hash


Source packages
===============

Generated by tool/src/create from recipes/freetype/src and GENODE_DIR

* Example:

  ! ./tool/src/create API=hash libc
  ('API' is taken from ./recipes if not specified)

* execute src/content.mk

  ! -> ./export/src/freetype.api-HASH/freetype.lib-HASH/used_apis
  !                                                     src/

* Compute source HASH by hashing the src directory content
  -> compare against the hash in recipes/freetype/src/hash


Library packages
================

Generated by tool/lib/create from export/src/freetype.api-HASH/freetype.so-HASH

* Example:

  ! ./tool/lib/create API=hash SRC=hash SPEC=x86_32 libc

  ('API' and 'SRC' is taken from ./recipes if not specified)

* Set up Genode build directory

  * etc/build.conf:
    ! GENODE_DIR := <genode-dir>
    ! REPOSITORIES := <build-dir>
    ! REPOSITORIES += <srcpkg-dir>
    (the <builddir> is specified as repository to let the build system find the
    generated library description files)

    Furthermore, the content of export/<SPEC>/etc/build.conf is included,
    which allows for the customization of the build parameters (like
    'MAKE += -j4') from a central place.

  * etc/specs.conf corresponds to SPEC argument

  * etc/tools.conf is taken from export/<SPEC>/etc/tools.conf if the file
    exist. This way, the tool chain can be easily customized

* Create lib/mk and lib/import files for the interfaces used by the library
  * use API symbols in lib/mk files
  * use API includes to define INC_DIR in lib/import files

* Build library
  -> ./export/lib/x86_32/freetype.api-HASH/build/freetype.lib-HASH/bin/freetype.lib.so

* Extract build result (copy everything from <build>/bin to <libpkg>/rom)
  -> ./export/lib/x86_32/freetype.api-HASH/freetype.lib-HASH/rom/freetype.lib.so

* Remove build directory


Target packages
===============

./export/target/x86_32/nitpicker-HASH/rom/nitpicker

